import { AddressLookupTableAccount, Blockhash, Connection, PublicKey, Transaction, TransactionInstruction, VersionedTransaction } from "@solana/web3.js";
import { BankVaultType } from "./types";
import BigNumber from "bignumber.js";
import { BankConfig, BankConfigRaw } from ".";
export declare function getBankVaultSeeds(type: BankVaultType): Buffer;
/**
 * Compute authority PDA for a specific marginfi group bank vault
 */
export declare function getBankVaultAuthority(bankVaultType: BankVaultType, bankPk: PublicKey, programId: PublicKey): [PublicKey, number];
export declare function makeWrapSolIxs(walletAddress: PublicKey, amount: BigNumber): TransactionInstruction[];
export declare function makeUnwrapSolIx(walletAddress: PublicKey): TransactionInstruction;
export declare function makeVersionedTransaction(blockhash: Blockhash, transaction: Transaction, payer: PublicKey, addressLookupTables?: AddressLookupTableAccount[]): Promise<VersionedTransaction>;
export declare function makePriorityFeeIx(priorityFeeUi?: number): TransactionInstruction[];
export declare function feedIdToString(feedId: PublicKey): string;
export type PythPushFeedIdMap = Map<string, PublicKey>;
export declare function buildFeedIdMap(bankConfigs: BankConfigRaw[], connection: Connection): Promise<PythPushFeedIdMap>;
export declare function findOracleKey(bankConfig: BankConfig, feedMap: PythPushFeedIdMap): PublicKey;
export declare const PYTH_SPONSORED_SHARD_ID = 0;
export declare const MARGINFI_SPONSORED_SHARD_ID = 3301;
export declare function findPythPushOracleAddress(feedId: Buffer, programId: PublicKey, shardId: number): PublicKey;
//# sourceMappingURL=utils.d.ts.map