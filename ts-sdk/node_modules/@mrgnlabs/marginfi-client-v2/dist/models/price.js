"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PriceBias = void 0;
exports.getPriceWithConfidence = getPriceWithConfidence;
exports.parsePriceInfo = parseOraclePriceData;
const pyth_legacy_1 = require("../vendor/pyth_legacy");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const switchboard_1 = require("../vendor/switchboard");
const __1 = require("..");
const bank_1 = require("./bank");
const PythPushOracle = __importStar(require("../vendor/pyth_push_oracle"));
var PriceBias;
(function (PriceBias) {
    PriceBias[PriceBias["Lowest"] = 0] = "Lowest";
    PriceBias[PriceBias["None"] = 1] = "None";
    PriceBias[PriceBias["Highest"] = 2] = "Highest";
})(PriceBias || (exports.PriceBias = PriceBias = {}));
function capConfidenceInterval(price, confidence, maxConfidence) {
    let maxConfidenceInterval = price.times(maxConfidence);
    return bignumber_js_1.default.min(confidence, maxConfidenceInterval);
}
function parseOraclePriceData(oracleSetup, rawData) {
    const debug = require("debug")("mfi:oracle-loader");
    switch (oracleSetup) {
        case bank_1.OracleSetup.PythLegacy:
            const pythPriceData = (0, pyth_legacy_1.parsePriceData)(rawData);
            let priceData = pythPriceData.price;
            if (priceData === undefined) {
                priceData = pythPriceData.previousPrice;
            }
            let confidenceData = pythPriceData.confidence;
            if (confidenceData === undefined) {
                confidenceData = pythPriceData.previousConfidence;
            }
            const pythPriceRealtime = new bignumber_js_1.default(priceData);
            const pythConfidenceRealtime = new bignumber_js_1.default(confidenceData).times(__1.PYTH_PRICE_CONF_INTERVALS);
            const pythConfidenceRealtimeCapped = capConfidenceInterval(pythPriceRealtime, pythConfidenceRealtime, __1.PYTH_PRICE_CONF_INTERVALS);
            const pythLowestPriceRealtime = pythPriceRealtime.minus(pythConfidenceRealtimeCapped);
            const pythHighestPriceRealtime = pythPriceRealtime.plus(pythConfidenceRealtimeCapped);
            const pythPriceWeighted = new bignumber_js_1.default(pythPriceData.emaPrice.value);
            const pythConfIntervalWeighted = new bignumber_js_1.default(pythPriceData.emaConfidence.value).times(__1.PYTH_PRICE_CONF_INTERVALS);
            const pythConfIntervalWeightedCapped = capConfidenceInterval(pythPriceWeighted, pythConfIntervalWeighted, __1.PYTH_PRICE_CONF_INTERVALS);
            const pythLowestPrice = pythPriceWeighted.minus(pythConfIntervalWeightedCapped);
            const pythHighestPrice = pythPriceWeighted.plus(pythConfIntervalWeightedCapped);
            debug("Loaded pyth price rt=%s (+/- %s), w=%s (+/- %s)", pythPriceRealtime.toString(), pythConfidenceRealtimeCapped.toString(), pythPriceWeighted.toString(), pythConfIntervalWeightedCapped.toString());
            return {
                priceRealtime: {
                    price: pythPriceRealtime,
                    confidence: pythConfidenceRealtimeCapped,
                    lowestPrice: pythLowestPriceRealtime,
                    highestPrice: pythHighestPriceRealtime,
                },
                priceWeighted: {
                    price: pythPriceWeighted,
                    confidence: pythConfIntervalWeightedCapped,
                    lowestPrice: pythLowestPrice,
                    highestPrice: pythHighestPrice,
                },
                timestamp: new bignumber_js_1.default(Number(pythPriceData.timestamp)),
            };
        case bank_1.OracleSetup.PythPushOracle:
            let bytesWithoutDiscriminator = rawData.slice(8);
            let data = PythPushOracle.parsePriceInfo(bytesWithoutDiscriminator);
            const exponent = new bignumber_js_1.default(10 ** data.priceMessage.exponent);
            const priceRealTime = new bignumber_js_1.default(Number(data.priceMessage.price)).times(exponent);
            const confidenceRealTime = new bignumber_js_1.default(Number(data.priceMessage.conf)).times(exponent);
            const cappedConfidenceRealTime = capConfidenceInterval(priceRealTime, confidenceRealTime, __1.PYTH_PRICE_CONF_INTERVALS);
            const lowestPriceRealTime = priceRealTime.minus(cappedConfidenceRealTime);
            const highestPriceRealTime = priceRealTime.plus(cappedConfidenceRealTime);
            const priceTimeWeighted = new bignumber_js_1.default(Number(data.priceMessage.emaPrice)).times(exponent);
            const confidenceTimeWeighted = new bignumber_js_1.default(Number(data.priceMessage.emaConf)).times(exponent);
            const cappedConfidenceWeighted = capConfidenceInterval(priceTimeWeighted, confidenceTimeWeighted, __1.PYTH_PRICE_CONF_INTERVALS);
            const lowestPriceWeighted = priceTimeWeighted.minus(cappedConfidenceWeighted);
            const highestPriceWeighted = priceTimeWeighted.plus(cappedConfidenceWeighted);
            return {
                priceRealtime: {
                    price: priceRealTime,
                    confidence: cappedConfidenceRealTime,
                    lowestPrice: lowestPriceRealTime,
                    highestPrice: highestPriceRealTime,
                },
                priceWeighted: {
                    price: priceTimeWeighted,
                    confidence: cappedConfidenceWeighted,
                    lowestPrice: lowestPriceWeighted,
                    highestPrice: highestPriceWeighted,
                },
                timestamp: new bignumber_js_1.default(Number(data.priceMessage.publishTime)),
            };
        case bank_1.OracleSetup.SwitchboardV2:
            const aggData = switchboard_1.AggregatorAccountData.decode(rawData);
            const swbPrice = new bignumber_js_1.default(switchboard_1.AggregatorAccount.decodeLatestValue(aggData).toString());
            const swbConfidence = new bignumber_js_1.default(aggData.latestConfirmedRound.stdDeviation.toBig().toString()).times(__1.SWB_PRICE_CONF_INTERVALS);
            const swbConfidenceCapped = capConfidenceInterval(swbPrice, swbConfidence, __1.MAX_CONFIDENCE_INTERVAL_RATIO);
            const swbLowestPrice = swbPrice.minus(swbConfidenceCapped);
            const swbHighestPrice = swbPrice.plus(swbConfidenceCapped);
            debug("Loaded swb price rt=%s (+/- %s), w=%s (+/- %s)", swbPrice.toString(), swbConfidenceCapped.toString(), swbPrice.toString(), swbConfidenceCapped.toString());
            return {
                priceRealtime: {
                    price: swbPrice,
                    confidence: swbConfidenceCapped,
                    lowestPrice: swbLowestPrice,
                    highestPrice: swbHighestPrice,
                },
                priceWeighted: {
                    price: swbPrice,
                    confidence: swbConfidenceCapped,
                    lowestPrice: swbLowestPrice,
                    highestPrice: swbHighestPrice,
                },
                timestamp: new bignumber_js_1.default(aggData.latestConfirmedRound.roundOpenTimestamp),
            };
        default:
            console.log("Invalid oracle setup", oracleSetup);
            throw new Error(`Invalid oracle setup "${oracleSetup}"`);
    }
}
function getPriceWithConfidence(oraclePrice, weighted) {
    return weighted ? oraclePrice.priceWeighted : oraclePrice.priceRealtime;
}
