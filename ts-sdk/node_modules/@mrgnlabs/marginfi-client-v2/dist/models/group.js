"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarginfiGroup = void 0;
const anchor_1 = require("@coral-xyz/anchor");
const web3_js_1 = require("@solana/web3.js");
const bn_js_1 = __importDefault(require("bn.js"));
const types_1 = require("../types");
const instructions_1 = __importDefault(require("../instructions"));
const constants_1 = require("../constants");
const bank_1 = require("./bank");
// ----------------------------------------------------------------------------
// Client types
// ----------------------------------------------------------------------------
class MarginfiGroup {
    constructor(admin, address) {
        this.admin = admin;
        this.address = address;
    }
    // ----------------------------------------------------------------------------
    // Factories
    // ----------------------------------------------------------------------------
    static fromAccountParsed(address, accountData) {
        const marginfiGroup = {
            admin: accountData.admin,
        };
        return new MarginfiGroup(marginfiGroup.admin, address);
    }
    static fromBuffer(address, rawData, idl) {
        const data = MarginfiGroup.decode(rawData, idl);
        return MarginfiGroup.fromAccountParsed(address, data);
    }
    static decode(encoded, idl) {
        const coder = new anchor_1.BorshCoder(idl);
        return coder.accounts.decode(types_1.AccountType.MarginfiGroup, encoded);
    }
    static async encode(decoded, idl) {
        const coder = new anchor_1.BorshCoder(idl);
        return await coder.accounts.encode(types_1.AccountType.MarginfiGroup, decoded);
    }
    // ----------------------------------------------------------------------------
    // Admin actions
    // ----------------------------------------------------------------------------
    async makeEnableFlashLoanForAccountIx(program, marginfiAccountAddress) {
        const ix = await instructions_1.default.makeSetAccountFlagIx(program, {
            marginfiGroup: this.address,
            marginfiAccount: marginfiAccountAddress,
            admin: this.admin,
        }, { flag: new bn_js_1.default(constants_1.FLASHLOAN_ENABLED_FLAG) });
        return {
            instructions: [ix],
            keys: [],
        };
    }
    async makeDisableFlashLoanForAccountIx(program, marginfiAccountAddress) {
        const ix = await instructions_1.default.makeUnsetAccountFlagIx(program, {
            marginfiGroup: this.address,
            marginfiAccount: marginfiAccountAddress,
            admin: this.admin,
        }, { flag: new bn_js_1.default(constants_1.FLASHLOAN_ENABLED_FLAG) });
        return {
            instructions: [ix],
            keys: [],
        };
    }
    async makeEnableAccountTransferForAccountIx(program, marginfiAccountAddress) {
        const ix = await instructions_1.default.makeSetAccountFlagIx(program, {
            marginfiGroup: this.address,
            marginfiAccount: marginfiAccountAddress,
            admin: this.admin,
        }, { flag: new bn_js_1.default(constants_1.TRANSFER_ACCOUNT_AUTHORITY_FLAG) });
        return {
            instructions: [ix],
            keys: [],
        };
    }
    async makeDisableAccountTransferForAccountIx(program, marginfiAccountAddress) {
        const ix = await instructions_1.default.makeUnsetAccountFlagIx(program, {
            marginfiGroup: this.address,
            marginfiAccount: marginfiAccountAddress,
            admin: this.admin,
        }, { flag: new bn_js_1.default(constants_1.TRANSFER_ACCOUNT_AUTHORITY_FLAG) });
        return {
            instructions: [ix],
            keys: [],
        };
    }
    async makePoolConfigureBankIxb(program, bank, args) {
        const ix = await instructions_1.default.makePoolConfigureBankIx(program, {
            marginfiGroup: this.address,
            admin: this.admin,
            bank: bank,
        }, { bankConfigOpt: args });
        return {
            instructions: [ix],
            keys: [],
        };
    }
    async makePoolAddBankIx(program, connection, bankPubkey, bankMint, bankConfig) {
        const liquidityVaultSeed = [Buffer.from("liquidity_vault"), bankPubkey.toBuffer()];
        const liquidityVaultAuthoritySeed = [Buffer.from("liquidity_vault_auth"), bankPubkey.toBuffer()];
        const insuranceVaultSeed = [Buffer.from("insurance_vault"), bankPubkey.toBuffer()];
        const insuranceVaultAuthoritySeed = [Buffer.from("insurance_vault_auth"), bankPubkey.toBuffer()];
        const feeVaultSeed = [Buffer.from("fee_vault"), bankPubkey.toBuffer()];
        const feeVaultAuthoritySeed = [Buffer.from("fee_vault_auth"), bankPubkey.toBuffer()];
        const [liquidityVault] = web3_js_1.PublicKey.findProgramAddressSync(liquidityVaultSeed, program.programId);
        const [liquidityVaultAuthority] = web3_js_1.PublicKey.findProgramAddressSync(liquidityVaultAuthoritySeed, program.programId);
        const [insuranceVault] = web3_js_1.PublicKey.findProgramAddressSync(insuranceVaultSeed, program.programId);
        const [insuranceVaultAuthority] = web3_js_1.PublicKey.findProgramAddressSync(insuranceVaultAuthoritySeed, program.programId);
        const [feeVault] = web3_js_1.PublicKey.findProgramAddressSync(feeVaultSeed, program.programId);
        const [feeVaultAuthority] = web3_js_1.PublicKey.findProgramAddressSync(feeVaultAuthoritySeed, program.programId);
        // TODO: convert depositLimit and borrowLimit based on mint decimals
        // const mint = getMint(connection, bankMint);
        let rawBankConfig = (0, bank_1.serializeBankConfigOpt)(bankConfig);
        const rawBankConfigCompact = {
            ...rawBankConfig,
            oracleKey: rawBankConfig.oracle?.keys[0],
            oracleSetup: rawBankConfig.oracle?.setup,
            auto_padding_0: [0],
            auto_padding_1: [0],
        };
        // const ix = await instructions.makePoolAddBankIx(
        //   program,
        //   {
        //     marginfiGroup: this.address,
        //     admin: this.admin,
        //     feePayer: this.admin,
        //     bankMint: bankMint,
        //     bank: bankPubkey,
        //     liquidityVaultAuthority: liquidityVaultAuthority,
        //     liquidityVault: liquidityVault,
        //     insuranceVaultAuthority: insuranceVaultAuthority,
        //     insuranceVault: insuranceVault,
        //     feeVaultAuthority: feeVaultAuthority,
        //     feeVault: feeVault,
        //     rent: SYSVAR_RENT_PUBKEY,
        //     tokenProgram: TOKEN_PROGRAM_ID,
        //     systemProgram: SystemProgram.programId,
        //     oracleKey: rawBankConfigCompact.oracleKey,
        //   },
        //   {
        //     bankConfig: rawBankConfigCompact,
        //   }
        // );
        return {
            instructions: [], //ix
            keys: [],
        };
    }
}
exports.MarginfiGroup = MarginfiGroup;
